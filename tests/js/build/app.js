

//@modules:


const $$nested_directory$moduleExports = (function (exports) {
 // variable;
	let months = ['Jan', 'Feb', 'Mar', 'Apr', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	var a = 66;
	const b = 67;
	// function:
	function ads(arg) { return 1 }
	// class:
	class Asde { constructor() { } }
	
	console.log('>> named exports test attached');
	
	exports = { months, a, b, ads, Asde };
	
	return exports 
})({})

const $$nested_directory$named_defaultExports = (function (exports) {
 
	
	function Ads(arg) { }
	
	class Cls { constructor() { } }
	
	console.log('>> named default export test attached');
	
	exports = { Ads, default:  Cls };
	
	return exports 
})({})

const $$nested_directory$unnamed_defaultExports = (function (exports) {
 
	var l = 11;
	class $default {
	    constructor() { }
	    a = 1
	}
	
	console.log('>> unnamed default export test attached');
	
	exports = { l, default: $default };
	
	return exports 
})({})


//@index.js: 

//@ts-check
// import assert from 'assert';

// TODO
// import defaultExport, { export [, [â€¦]] } from "module-name";         // not implemented yet
// import "module-name";                                                // implemented


const mod = $$nested_directory$moduleExports;
const { months, ads, a: flatVar } = $$nested_directory$moduleExports;
const { default: Cls } = $$nested_directory$named_defaultExports;
const { default: Cls1 } = $$nested_directory$unnamed_defaultExports;


console.log('>'.repeat(25));

const tests = [
    {
        name: 'named import',
        up: () => months.length === 9,
    },
    {
        name: 'named import',
        up: () => ads() === 1,
    },
    {
        name: 'alias import',
        up: () => flatVar === 66,
    },
    {
        name: 'default named import',
        up: () => new Cls,
    },
    {
        name: 'default unnamed import',
        up: () => new Cls1().a === 1,
    },
    {
        name: 'module import',
        up: () => mod.a === flatVar,
    },
]

tests.forEach(test => {
    if (test.up()) console.log('\t' + test.name + ' is success');
    else {
        throw new Error(test.name + ' is failed')
    }
})

var a = months;

console.log('<'.repeat(25));

// console.log(a);

// rollup -i index.js -o t.js -p @rollup/plugin-commonjs -p @rollup/plugin-node-resolve -p rollup-plugin-uglify
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlcyI6WyJuZXN0ZWRfZGlyZWN0b3J5L21vZHVsZS5qcyIsIm5lc3RlZF9kaXJlY3RvcnkvbmFtZWRfZGVmYXVsdC5qcyIsIm5lc3RlZF9kaXJlY3RvcnkvdW5uYW1lZF9kZWZhdWx0LmpzIiwiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiIC8vIHZhcmlhYmxlO1xyXG5cdGxldCBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ107XHJcblx0dmFyIGEgPSA2NjtcclxuXHRjb25zdCBiID0gNjc7XHJcblx0Ly8gZnVuY3Rpb246XHJcblx0ZnVuY3Rpb24gYWRzKGFyZykgeyByZXR1cm4gMSB9XHJcblx0Ly8gY2xhc3M6XHJcblx0Y2xhc3MgQXNkZSB7IGNvbnN0cnVjdG9yKCkgeyB9IH1cclxuXHRcclxuXHRjb25zb2xlLmxvZygnPj4gbmFtZWQgZXhwb3J0cyB0ZXN0IGF0dGFjaGVkJyk7IiwiIFxyXG5cdFxyXG5cdGZ1bmN0aW9uIEFkcyhhcmcpIHsgfVxyXG5cdFxyXG5cdGNsYXNzIENscyB7IGNvbnN0cnVjdG9yKCkgeyB9IH1cclxuXHRcclxuXHRjb25zb2xlLmxvZygnPj4gbmFtZWQgZGVmYXVsdCBleHBvcnQgdGVzdCBhdHRhY2hlZCcpOyIsIiBcclxuXHR2YXIgbCA9IDExO1xyXG5cdGNsYXNzICRkZWZhdWx0IHtcclxuXHQgICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHQgICAgYSA9IDFcclxuXHR9XHJcblx0XHJcblx0Y29uc29sZS5sb2coJz4+IHVubmFtZWQgZGVmYXVsdCBleHBvcnQgdGVzdCBhdHRhY2hlZCcpOyIsIlxyXG4vL0B0cy1jaGVja1xyXG4vLyBpbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XHJcblxyXG4vLyBUT0RPXHJcbi8vIGltcG9ydCBkZWZhdWx0RXhwb3J0LCB7IGV4cG9ydCBbLCBb4oCmXV0gfSBmcm9tIFwibW9kdWxlLW5hbWVcIjsgICAgICAgICAvLyBub3QgaW1wbGVtZW50ZWQgeWV0XHJcbi8vIGltcG9ydCBcIm1vZHVsZS1uYW1lXCI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW1wbGVtZW50ZWRcclxuXHJcblxyXG5pbXBvcnQgKiBhcyBtb2QgZnJvbSBcIi4vbmVzdGVkX2RpcmVjdG9yeS9tb2R1bGVcIlxyXG5pbXBvcnQgeyBtb250aHMsIGFkcywgYSBhcyBmbGF0VmFyIH0gZnJvbSBcIi4vbmVzdGVkX2RpcmVjdG9yeS9tb2R1bGVcIlxyXG5pbXBvcnQgQ2xzIGZyb20gXCIuL25lc3RlZF9kaXJlY3RvcnkvbmFtZWRfZGVmYXVsdFwiXHJcbmltcG9ydCBDbHMxIGZyb20gXCIuL25lc3RlZF9kaXJlY3RvcnkvdW5uYW1lZF9kZWZhdWx0XCJcclxuXHJcblxyXG5jb25zb2xlLmxvZygnPicucmVwZWF0KDI1KSk7XHJcblxyXG5jb25zdCB0ZXN0cyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbmFtZWQgaW1wb3J0JyxcclxuICAgICAgICB1cDogKCkgPT4gbW9udGhzLmxlbmd0aCA9PT0gOSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ25hbWVkIGltcG9ydCcsXHJcbiAgICAgICAgdXA6ICgpID0+IGFkcygpID09PSAxLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnYWxpYXMgaW1wb3J0JyxcclxuICAgICAgICB1cDogKCkgPT4gZmxhdFZhciA9PT0gNjYsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdkZWZhdWx0IG5hbWVkIGltcG9ydCcsXHJcbiAgICAgICAgdXA6ICgpID0+IG5ldyBDbHMsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdkZWZhdWx0IHVubmFtZWQgaW1wb3J0JyxcclxuICAgICAgICB1cDogKCkgPT4gbmV3IENsczEoKS5hID09PSAxLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbW9kdWxlIGltcG9ydCcsXHJcbiAgICAgICAgdXA6ICgpID0+IG1vZC5hID09PSBmbGF0VmFyLFxyXG4gICAgfSxcclxuXVxyXG5cclxudGVzdHMuZm9yRWFjaCh0ZXN0ID0+IHtcclxuICAgIGlmICh0ZXN0LnVwKCkpIGNvbnNvbGUubG9nKCdcXHQnICsgdGVzdC5uYW1lICsgJyBpcyBzdWNjZXNzJyk7XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGVzdC5uYW1lICsgJyBpcyBmYWlsZWQnKVxyXG4gICAgfVxyXG59KVxyXG5cclxudmFyIGEgPSBtb250aHM7XHJcblxyXG5jb25zb2xlLmxvZygnPCcucmVwZWF0KDI1KSk7XHJcblxyXG4vLyBjb25zb2xlLmxvZyhhKTtcclxuXHJcbi8vIHJvbGx1cCAtaSBpbmRleC5qcyAtbyB0LmpzIC1wIEByb2xsdXAvcGx1Z2luLWNvbW1vbmpzIC1wIEByb2xsdXAvcGx1Z2luLW5vZGUtcmVzb2x2ZSAtcCByb2xsdXAtcGx1Z2luLXVnbGlmeSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDWixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1YsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUNELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7OztBQ1Q5QyxDQUFDO0FBQ0QsQ0FBQztBQUNELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQUNELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBQ0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7Ozs7QUNOckQsQ0FBQztBQUNELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1osQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNWLENBQUMsQ0FBQztBQUNGLENBQUM7QUFDRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7Ozs7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBO0EsQSxBLEE7QSxBLEEsQTtBLEEsQSxBOyJ9